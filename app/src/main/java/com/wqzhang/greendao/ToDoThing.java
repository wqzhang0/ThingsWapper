package com.wqzhang.greendao;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import com.wqzhang.greendao.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "TO_DO_THING".
 */
@Entity(active = true)
public class ToDoThing {

    @Id
    private Long id;
    private String reminderContext;
    private Integer reminderType;
    private java.util.Date createDate;
    private Integer Status;
    private Boolean isSynchronize;
    private Long userId;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient ToDoThingDao myDao;

    @ToOne(joinProperty = "userId")
    private User user;

    @Generated
    private transient Long user__resolvedKey;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "notificationId")
    })
    @OrderBy("notificationId ASC")
    private List<Notification> norifications;

    @Generated
    public ToDoThing() {
    }

    public ToDoThing(Long id) {
        this.id = id;
    }

    @Generated
    public ToDoThing(Long id, String reminderContext, Integer reminderType, java.util.Date createDate, Integer Status, Boolean isSynchronize, Long userId) {
        this.id = id;
        this.reminderContext = reminderContext;
        this.reminderType = reminderType;
        this.createDate = createDate;
        this.Status = Status;
        this.isSynchronize = isSynchronize;
        this.userId = userId;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getToDoThingDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getReminderContext() {
        return reminderContext;
    }

    public void setReminderContext(String reminderContext) {
        this.reminderContext = reminderContext;
    }

    public Integer getReminderType() {
        return reminderType;
    }

    public void setReminderType(Integer reminderType) {
        this.reminderType = reminderType;
    }

    public java.util.Date getCreateDate() {
        return createDate;
    }

    public void setCreateDate(java.util.Date createDate) {
        this.createDate = createDate;
    }

    public Integer getStatus() {
        return Status;
    }

    public void setStatus(Integer Status) {
        this.Status = Status;
    }

    public Boolean getIsSynchronize() {
        return isSynchronize;
    }

    public void setIsSynchronize(Boolean isSynchronize) {
        this.isSynchronize = isSynchronize;
    }

    public Long getUserId() {
        return userId;
    }

    public void setUserId(Long userId) {
        this.userId = userId;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public User getUser() {
        Long __key = this.userId;
        if (user__resolvedKey == null || !user__resolvedKey.equals(__key)) {
            __throwIfDetached();
            UserDao targetDao = daoSession.getUserDao();
            User userNew = targetDao.load(__key);
            synchronized (this) {
                user = userNew;
            	user__resolvedKey = __key;
            }
        }
        return user;
    }

    @Generated
    public void setUser(User user) {
        synchronized (this) {
            this.user = user;
            userId = user == null ? null : user.getId();
            user__resolvedKey = userId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Notification> getNorifications() {
        if (norifications == null) {
            __throwIfDetached();
            NotificationDao targetDao = daoSession.getNotificationDao();
            List<Notification> norificationsNew = targetDao._queryToDoThing_Norifications(id);
            synchronized (this) {
                if(norifications == null) {
                    norifications = norificationsNew;
                }
            }
        }
        return norifications;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetNorifications() {
        norifications = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
