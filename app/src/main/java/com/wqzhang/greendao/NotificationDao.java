package com.wqzhang.greendao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NOTIFICATION".
*/
public class NotificationDao extends AbstractDao<Notification, Long> {

    public static final String TABLENAME = "NOTIFICATION";

    /**
     * Properties of entity Notification.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ToDoThingId = new Property(0, Long.class, "toDoThingId", false, "TO_DO_THING_ID");
        public final static Property UserId = new Property(1, Long.class, "userId", false, "USER_ID");
        public final static Property Id = new Property(2, Long.class, "id", true, "_id");
        public final static Property IsNotify = new Property(3, Boolean.class, "isNotify", false, "IS_NOTIFY");
        public final static Property ReminderDate = new Property(4, java.util.Date.class, "reminderDate", false, "REMINDER_DATE");
        public final static Property RemindFrequency = new Property(5, Integer.class, "remindFrequency", false, "REMIND_FREQUENCY");
        public final static Property RemindFrequencyInterval = new Property(6, Integer.class, "remindFrequencyInterval", false, "REMIND_FREQUENCY_INTERVAL");
        public final static Property RemindCount = new Property(7, Integer.class, "remindCount", false, "REMIND_COUNT");
        public final static Property EndDate = new Property(8, java.util.Date.class, "endDate", false, "END_DATE");
        public final static Property IsSynchronize = new Property(9, Boolean.class, "isSynchronize", false, "IS_SYNCHRONIZE");
        public final static Property NotificationId = new Property(10, long.class, "notificationId", false, "NOTIFICATION_ID");
    }

    private DaoSession daoSession;

    private Query<Notification> toDoThing_NorificationsQuery;

    public NotificationDao(DaoConfig config) {
        super(config);
    }
    
    public NotificationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NOTIFICATION\" (" + //
                "\"TO_DO_THING_ID\" INTEGER," + // 0: toDoThingId
                "\"USER_ID\" INTEGER," + // 1: userId
                "\"_id\" INTEGER PRIMARY KEY ," + // 2: id
                "\"IS_NOTIFY\" INTEGER," + // 3: isNotify
                "\"REMINDER_DATE\" INTEGER," + // 4: reminderDate
                "\"REMIND_FREQUENCY\" INTEGER," + // 5: remindFrequency
                "\"REMIND_FREQUENCY_INTERVAL\" INTEGER," + // 6: remindFrequencyInterval
                "\"REMIND_COUNT\" INTEGER," + // 7: remindCount
                "\"END_DATE\" INTEGER," + // 8: endDate
                "\"IS_SYNCHRONIZE\" INTEGER," + // 9: isSynchronize
                "\"NOTIFICATION_ID\" INTEGER NOT NULL );"); // 10: notificationId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NOTIFICATION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Notification entity) {
        stmt.clearBindings();
 
        Long toDoThingId = entity.getToDoThingId();
        if (toDoThingId != null) {
            stmt.bindLong(1, toDoThingId);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(3, id);
        }
 
        Boolean isNotify = entity.getIsNotify();
        if (isNotify != null) {
            stmt.bindLong(4, isNotify ? 1L: 0L);
        }
 
        java.util.Date reminderDate = entity.getReminderDate();
        if (reminderDate != null) {
            stmt.bindLong(5, reminderDate.getTime());
        }
 
        Integer remindFrequency = entity.getRemindFrequency();
        if (remindFrequency != null) {
            stmt.bindLong(6, remindFrequency);
        }
 
        Integer remindFrequencyInterval = entity.getRemindFrequencyInterval();
        if (remindFrequencyInterval != null) {
            stmt.bindLong(7, remindFrequencyInterval);
        }
 
        Integer remindCount = entity.getRemindCount();
        if (remindCount != null) {
            stmt.bindLong(8, remindCount);
        }
 
        java.util.Date endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindLong(9, endDate.getTime());
        }
 
        Boolean isSynchronize = entity.getIsSynchronize();
        if (isSynchronize != null) {
            stmt.bindLong(10, isSynchronize ? 1L: 0L);
        }
        stmt.bindLong(11, entity.getNotificationId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Notification entity) {
        stmt.clearBindings();
 
        Long toDoThingId = entity.getToDoThingId();
        if (toDoThingId != null) {
            stmt.bindLong(1, toDoThingId);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(3, id);
        }
 
        Boolean isNotify = entity.getIsNotify();
        if (isNotify != null) {
            stmt.bindLong(4, isNotify ? 1L: 0L);
        }
 
        java.util.Date reminderDate = entity.getReminderDate();
        if (reminderDate != null) {
            stmt.bindLong(5, reminderDate.getTime());
        }
 
        Integer remindFrequency = entity.getRemindFrequency();
        if (remindFrequency != null) {
            stmt.bindLong(6, remindFrequency);
        }
 
        Integer remindFrequencyInterval = entity.getRemindFrequencyInterval();
        if (remindFrequencyInterval != null) {
            stmt.bindLong(7, remindFrequencyInterval);
        }
 
        Integer remindCount = entity.getRemindCount();
        if (remindCount != null) {
            stmt.bindLong(8, remindCount);
        }
 
        java.util.Date endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindLong(9, endDate.getTime());
        }
 
        Boolean isSynchronize = entity.getIsSynchronize();
        if (isSynchronize != null) {
            stmt.bindLong(10, isSynchronize ? 1L: 0L);
        }
        stmt.bindLong(11, entity.getNotificationId());
    }

    @Override
    protected final void attachEntity(Notification entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2);
    }    

    @Override
    public Notification readEntity(Cursor cursor, int offset) {
        Notification entity = new Notification( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // toDoThingId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // id
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // isNotify
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // reminderDate
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // remindFrequency
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // remindFrequencyInterval
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // remindCount
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // endDate
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // isSynchronize
            cursor.getLong(offset + 10) // notificationId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Notification entity, int offset) {
        entity.setToDoThingId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setIsNotify(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setReminderDate(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setRemindFrequency(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setRemindFrequencyInterval(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setRemindCount(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setEndDate(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setIsSynchronize(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setNotificationId(cursor.getLong(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Notification entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Notification entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Notification entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "norifications" to-many relationship of ToDoThing. */
    public List<Notification> _queryToDoThing_Norifications(long notificationId) {
        synchronized (this) {
            if (toDoThing_NorificationsQuery == null) {
                QueryBuilder<Notification> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.NotificationId.eq(null));
                queryBuilder.orderRaw("T.'NOTIFICATION_ID' ASC");
                toDoThing_NorificationsQuery = queryBuilder.build();
            }
        }
        Query<Notification> query = toDoThing_NorificationsQuery.forCurrentThread();
        query.setParameter(0, notificationId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getToDoThingDao().getAllColumns());
            builder.append(" FROM NOTIFICATION T");
            builder.append(" LEFT JOIN USER T0 ON T.\"USER_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN TO_DO_THING T1 ON T.\"TO_DO_THING_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Notification loadCurrentDeep(Cursor cursor, boolean lock) {
        Notification entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        User user = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
        entity.setUser(user);
        offset += daoSession.getUserDao().getAllColumns().length;

        ToDoThing toDoThing = loadCurrentOther(daoSession.getToDoThingDao(), cursor, offset);
        entity.setToDoThing(toDoThing);

        return entity;    
    }

    public Notification loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Notification> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Notification> list = new ArrayList<Notification>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Notification> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Notification> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
