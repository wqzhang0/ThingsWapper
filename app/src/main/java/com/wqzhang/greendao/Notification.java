package com.wqzhang.greendao;

import org.greenrobot.greendao.annotation.*;

import com.wqzhang.greendao.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "NOTIFICATION".
 */
@Entity(active = true)
public class Notification {
    private Long toDoThingId;
    private Long userId;

    @Id
    private Long id;
    private Boolean isNotify;
    private java.util.Date reminderDate;
    private Integer remindFrequency;
    private Integer remindFrequencyInterval;
    private Integer remindCount;
    private java.util.Date endDate;
    private Boolean isSynchronize;
    private long notificationId;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient NotificationDao myDao;

    @ToOne(joinProperty = "userId")
    private User user;

    @Generated
    private transient Long user__resolvedKey;

    @ToOne(joinProperty = "toDoThingId")
    private ToDoThing toDoThing;

    @Generated
    private transient Long toDoThing__resolvedKey;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Notification() {
    }

    public Notification(Long id) {
        this.id = id;
    }

    @Generated
    public Notification(Long toDoThingId, Long userId, Long id, Boolean isNotify, java.util.Date reminderDate, Integer remindFrequency, Integer remindFrequencyInterval, Integer remindCount, java.util.Date endDate, Boolean isSynchronize, long notificationId) {
        this.toDoThingId = toDoThingId;
        this.userId = userId;
        this.id = id;
        this.isNotify = isNotify;
        this.reminderDate = reminderDate;
        this.remindFrequency = remindFrequency;
        this.remindFrequencyInterval = remindFrequencyInterval;
        this.remindCount = remindCount;
        this.endDate = endDate;
        this.isSynchronize = isSynchronize;
        this.notificationId = notificationId;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getNotificationDao() : null;
    }

    public Long getToDoThingId() {
        return toDoThingId;
    }

    public void setToDoThingId(Long toDoThingId) {
        this.toDoThingId = toDoThingId;
    }

    public Long getUserId() {
        return userId;
    }

    public void setUserId(Long userId) {
        this.userId = userId;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Boolean getIsNotify() {
        return isNotify;
    }

    public void setIsNotify(Boolean isNotify) {
        this.isNotify = isNotify;
    }

    public java.util.Date getReminderDate() {
        return reminderDate;
    }

    public void setReminderDate(java.util.Date reminderDate) {
        this.reminderDate = reminderDate;
    }

    public Integer getRemindFrequency() {
        return remindFrequency;
    }

    public void setRemindFrequency(Integer remindFrequency) {
        this.remindFrequency = remindFrequency;
    }

    public Integer getRemindFrequencyInterval() {
        return remindFrequencyInterval;
    }

    public void setRemindFrequencyInterval(Integer remindFrequencyInterval) {
        this.remindFrequencyInterval = remindFrequencyInterval;
    }

    public Integer getRemindCount() {
        return remindCount;
    }

    public void setRemindCount(Integer remindCount) {
        this.remindCount = remindCount;
    }

    public java.util.Date getEndDate() {
        return endDate;
    }

    public void setEndDate(java.util.Date endDate) {
        this.endDate = endDate;
    }

    public Boolean getIsSynchronize() {
        return isSynchronize;
    }

    public void setIsSynchronize(Boolean isSynchronize) {
        this.isSynchronize = isSynchronize;
    }

    public long getNotificationId() {
        return notificationId;
    }

    public void setNotificationId(long notificationId) {
        this.notificationId = notificationId;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public User getUser() {
        Long __key = this.userId;
        if (user__resolvedKey == null || !user__resolvedKey.equals(__key)) {
            __throwIfDetached();
            UserDao targetDao = daoSession.getUserDao();
            User userNew = targetDao.load(__key);
            synchronized (this) {
                user = userNew;
            	user__resolvedKey = __key;
            }
        }
        return user;
    }

    @Generated
    public void setUser(User user) {
        synchronized (this) {
            this.user = user;
            userId = user == null ? null : user.getId();
            user__resolvedKey = userId;
        }
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public ToDoThing getToDoThing() {
        Long __key = this.toDoThingId;
        if (toDoThing__resolvedKey == null || !toDoThing__resolvedKey.equals(__key)) {
            __throwIfDetached();
            ToDoThingDao targetDao = daoSession.getToDoThingDao();
            ToDoThing toDoThingNew = targetDao.load(__key);
            synchronized (this) {
                toDoThing = toDoThingNew;
            	toDoThing__resolvedKey = __key;
            }
        }
        return toDoThing;
    }

    @Generated
    public void setToDoThing(ToDoThing toDoThing) {
        synchronized (this) {
            this.toDoThing = toDoThing;
            toDoThingId = toDoThing == null ? null : toDoThing.getId();
            toDoThing__resolvedKey = toDoThingId;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
