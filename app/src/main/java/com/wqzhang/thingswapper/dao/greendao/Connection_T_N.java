package com.wqzhang.thingswapper.dao.greendao;

import org.greenrobot.greendao.annotation.*;

import com.wqzhang.thingswapper.dao.greendao.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "CONNECTION__T__N".
 */
@Entity(active = true)
public class Connection_T_N {

    @Id
    private Long id;
    private Long toDoThingId;
    private Long notificationId;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient Connection_T_NDao myDao;

    @ToOne(joinProperty = "toDoThingId")
    private ToDoThing toDoThing;

    @Generated
    private transient Long toDoThing__resolvedKey;

    @ToOne(joinProperty = "notificationId")
    private Notification notification;

    @Generated
    private transient Long notification__resolvedKey;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Connection_T_N() {
    }

    public Connection_T_N(Long id) {
        this.id = id;
    }

    @Generated
    public Connection_T_N(Long id, Long toDoThingId, Long notificationId) {
        this.id = id;
        this.toDoThingId = toDoThingId;
        this.notificationId = notificationId;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getConnection_T_NDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getToDoThingId() {
        return toDoThingId;
    }

    public void setToDoThingId(Long toDoThingId) {
        this.toDoThingId = toDoThingId;
    }

    public Long getNotificationId() {
        return notificationId;
    }

    public void setNotificationId(Long notificationId) {
        this.notificationId = notificationId;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public ToDoThing getToDoThing() {
        Long __key = this.toDoThingId;
        if (toDoThing__resolvedKey == null || !toDoThing__resolvedKey.equals(__key)) {
            __throwIfDetached();
            ToDoThingDao targetDao = daoSession.getToDoThingDao();
            ToDoThing toDoThingNew = targetDao.load(__key);
            synchronized (this) {
                toDoThing = toDoThingNew;
            	toDoThing__resolvedKey = __key;
            }
        }
        return toDoThing;
    }

    @Generated
    public void setToDoThing(ToDoThing toDoThing) {
        synchronized (this) {
            this.toDoThing = toDoThing;
            toDoThingId = toDoThing == null ? null : toDoThing.getId();
            toDoThing__resolvedKey = toDoThingId;
        }
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Notification getNotification() {
        Long __key = this.notificationId;
        if (notification__resolvedKey == null || !notification__resolvedKey.equals(__key)) {
            __throwIfDetached();
            NotificationDao targetDao = daoSession.getNotificationDao();
            Notification notificationNew = targetDao.load(__key);
            synchronized (this) {
                notification = notificationNew;
            	notification__resolvedKey = __key;
            }
        }
        return notification;
    }

    @Generated
    public void setNotification(Notification notification) {
        synchronized (this) {
            this.notification = notification;
            notificationId = notification == null ? null : notification.getId();
            notification__resolvedKey = notificationId;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
